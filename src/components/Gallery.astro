---
import KvBanner from './KvBanner.astro';
import { Image } from 'astro:assets';

// Import all images from src/assets/gallery for astro:assets processing
const images = Object.values(import.meta.glob('../assets/gallery/*.{jpg,jpeg,png,webp}', { eager: true, import: 'default' }));
// Sort by URL/name for stable order
images.sort((a, b) => (a.src < b.src ? -1 : a.src > b.src ? 1 : 0));
---

<section id="gallery" class="pt-0">
  <KvBanner color="yellow" title="Gallery" subtitle="Highlights from our events" />
  <div class="bg-white">
    <div class="max-w-7xl mx-auto px-4 lg:px-6 py-12 md:py-14">
      <!-- Launch Event 1 August 2025 -->
      <div class="p-6 rounded-2xl bg-white border border-gray-200">
        <div class="text-xs font-semibold text-brand-yellow mb-1">LAUNCH EVENT</div>
        <h3 class="font-semibold">1 August 2025</h3>
        <div class="mt-4 gallery-grid">
          {images.map((img, index) => (
            <div class="gallery-item" data-lightbox="launch" data-full-src={img.src}>
              <div class="gallery-thumb-wrapper">
                <Image
                  src={img}
                  alt={`Launch Event photo ${index + 1}`}
                  widths={[200]}
                  sizes="200px"
                  loading="lazy"
                  decoding="async"
                  width={200}
                  height={144}
                  fetchpriority={index < 3 ? 'high' : 'low'}
                  class="gallery-thumb"
                  style="width:100%;height:100%;object-fit:cover;object-position:center;aspect-ratio:4/3;"
                />
                <div class="gallery-overlay">
                  <svg class="gallery-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7"/>
                  </svg>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>

  <!-- Optimized Lightbox Modal -->
  <div id="lightbox" class="lightbox-overlay" role="dialog" aria-modal="true" aria-label="Image gallery">
    <div class="lightbox-container">
      <div id="lightbox-loading" class="lightbox-loading">
        <div class="spinner"></div>
      </div>
      <img id="lightbox-img" src="" alt="" class="lightbox-image" />
      <button id="lightbox-close" class="lightbox-btn lightbox-close" aria-label="Close lightbox">&times;</button>
      <button id="lightbox-prev" class="lightbox-btn lightbox-nav lightbox-prev" aria-label="Previous image">&#8249;</button>
      <button id="lightbox-next" class="lightbox-btn lightbox-nav lightbox-next" aria-label="Next image">&#8250;</button>
    </div>
  </div>
</section>

<script>
  // High-performance lightbox with debouncing and optimizations
  (() => {
    let lightbox, lightboxImg, lightboxLoading, closeBtn, prevBtn, nextBtn;
    let currentImages = [];
    let currentIndex = 0;
    let isOpen = false;
    let imageCache = new Map();
    
    // Throttled RAF for smooth animations
    const throttledRaf = (fn) => {
      let ticking = false;
      return (...args) => {
        if (!ticking) {
          requestAnimationFrame(() => {
            fn(...args);
            ticking = false;
          });
          ticking = true;
        }
      };
    };
    
    // Optimized image preloader with abort controller
    const preloadImage = (src, signal) => {
      if (imageCache.has(src)) return Promise.resolve(imageCache.get(src));
      
      return new Promise((resolve, reject) => {
        const img = new Image();
        img.onload = () => {
          imageCache.set(src, img);
          resolve(img);
        };
        img.onerror = reject;
        if (signal) {
          signal.addEventListener('abort', () => {
            img.src = '';
            reject(new Error('Aborted'));
          });
        }
        img.src = src;
      });
    };
    
    // Debounced keyboard handler
    const handleKeyboard = throttledRaf((e) => {
      if (!isOpen) return;
      switch (e.key) {
        case 'Escape': hideLightbox(); break;
        case 'ArrowLeft': showPrev(); break;
        case 'ArrowRight': showNext(); break;
      }
    });
    
    const showLightbox = async () => {
      const currentContainer = currentImages[currentIndex];
      if (!currentContainer) return;
      
      isOpen = true;
      lightbox.classList.add('lightbox-active');
      lightboxImg.style.opacity = '0';
      lightboxLoading.style.display = 'flex';
      document.body.style.overflow = 'hidden';
      
      try {
        const fullSrc = currentContainer.dataset.fullSrc;
        await preloadImage(fullSrc);
        
        // Use RAF to ensure smooth transition
        requestAnimationFrame(() => {
          lightboxLoading.style.display = 'none';
          lightboxImg.src = fullSrc;
          lightboxImg.alt = currentContainer.querySelector('img').alt;
          lightboxImg.style.opacity = '1';
        });
        
        // Background preload adjacent images
        preloadAdjacent();
      } catch (error) {
        console.warn('Failed to load image:', error);
        lightboxLoading.style.display = 'none';
        const thumbImg = currentContainer.querySelector('img');
        lightboxImg.src = thumbImg.src;
        lightboxImg.alt = thumbImg.alt;
        lightboxImg.style.opacity = '1';
      }
    };
    
    const preloadAdjacent = () => {
      const nextIndex = (currentIndex + 1) % currentImages.length;
      const prevIndex = (currentIndex - 1 + currentImages.length) % currentImages.length;
      
      // Non-blocking preload
      setTimeout(() => {
        if (currentImages[nextIndex]) {
          preloadImage(currentImages[nextIndex].dataset.fullSrc).catch(() => {});
        }
        if (currentImages[prevIndex]) {
          preloadImage(currentImages[prevIndex].dataset.fullSrc).catch(() => {});
        }
      }, 100);
    };
    
    const hideLightbox = () => {
      isOpen = false;
      lightbox.classList.remove('lightbox-active');
      lightboxImg.style.opacity = '0';
      document.body.style.overflow = '';
    };
    
    const showNext = () => {
      currentIndex = (currentIndex + 1) % currentImages.length;
      showLightbox();
    };
    
    const showPrev = () => {
      currentIndex = (currentIndex - 1 + currentImages.length) % currentImages.length;
      showLightbox();
    };
    
    // Initialize when DOM is ready
    const init = () => {
      lightbox = document.getElementById('lightbox');
      lightboxImg = document.getElementById('lightbox-img');
      lightboxLoading = document.getElementById('lightbox-loading');
      closeBtn = document.getElementById('lightbox-close');
      prevBtn = document.getElementById('lightbox-prev');
      nextBtn = document.getElementById('lightbox-next');
      
      if (!lightbox || !lightboxImg) return;
      
      // Single delegated click handler
      document.addEventListener('click', (e) => {
        const container = e.target.closest('[data-lightbox]');
        if (!container) return;
        
        e.preventDefault();
        const category = container.dataset.lightbox;
        currentImages = [...document.querySelectorAll(`[data-lightbox="${category}"]`)];
        currentIndex = currentImages.indexOf(container);
        showLightbox();
      }, { passive: false });
      
      // Optimized event listeners
      closeBtn?.addEventListener('click', hideLightbox);
      nextBtn?.addEventListener('click', showNext);
      prevBtn?.addEventListener('click', showPrev);
      
      lightbox.addEventListener('click', (e) => {
        if (e.target === lightbox) hideLightbox();
      });
      
      document.addEventListener('keydown', handleKeyboard);
    };
    
    // Initialize on DOM ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', init);
    } else {
      init();
    }
  })();
</script>

<style>
  /* High-performance gallery grid */
  .gallery-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 0.75rem;
    contain: layout style;
  }
  
  /* Optimized gallery items - removed heavy transforms */
  .gallery-item {
    cursor: pointer;
    border-radius: 0.5rem;
    overflow: hidden;
    contain: layout style;
    /* content-visibility: auto; */
    contain-intrinsic-size: 200px 150px;
  }
  
  .gallery-thumb-wrapper {
    position: relative;
    aspect-ratio: 4/3;
    overflow: hidden;
    background: #f3f4f6;
  }
  
  .gallery-thumb {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    image-rendering: auto;
  }
  
  /* Lightweight overlay - no backdrop-filter */
  .gallery-overlay {
    position: absolute;
    inset: 0;
    background: rgba(0, 0, 0, 0.6);
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.15s ease;
    pointer-events: none;
    will-change: opacity;
  }
  
  .gallery-item:hover .gallery-overlay {
    opacity: 1;
    pointer-events: auto;
  }
  
  .gallery-icon {
    width: 2rem;
    height: 2rem;
    color: white;
  }
  
  /* Optimized lightbox */
  .lightbox-overlay {
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.95);
    z-index: 50;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 1rem;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
    contain: layout style paint;
  }
  
  .lightbox-overlay.lightbox-active {
    opacity: 1;
    visibility: visible;
  }
  
  .lightbox-container {
    position: relative;
    max-width: 80rem;
    max-height: 100%;
    contain: layout;
  }
  
  .lightbox-loading {
    position: absolute;
    inset: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    display: none;
  }
  
  .spinner {
    width: 2rem;
    height: 2rem;
    border: 2px solid white;
    border-top-color: transparent;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
  
  .lightbox-image {
    max-width: 100%;
    max-height: 100vh;
    object-fit: contain;
    transition: opacity 0.3s ease;
    contain: layout style;
  }
  
  .lightbox-btn {
    position: absolute;
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    z-index: 10;
    transition: color 0.2s ease;
    font-size: 1.5rem;
    padding: 0.5rem;
    border-radius: 0.25rem;
    backdrop-filter: none;
    background: rgba(0, 0, 0, 0.35);
  }
  
  .lightbox-btn:hover {
    color: #d1d5db;
    background: rgba(0, 0, 0, 0.5);
  }
  
  .lightbox-close {
    top: 1rem;
    right: 1rem;
    font-size: 2rem;
  }
  
  .lightbox-nav {
    top: 50%;
    transform: translateY(-50%);
    font-size: 3rem;
  }
  
  .lightbox-prev { left: 1rem; }
  .lightbox-next { right: 1rem; }
  
  @keyframes spin {
    to { transform: rotate(360deg); }
  }
  
  /* Performance optimizations */
  @media (prefers-reduced-motion: reduce) {
    .gallery-item,
    .gallery-thumb,
    .gallery-overlay,
    .lightbox-overlay,
    .lightbox-image {
      transition: none;
    }
    
    .gallery-item:hover {
      transform: none;
    }
    
    .gallery-item:hover .gallery-thumb {
      transform: none;
    }
  }
  
  /* Mobile optimizations */
  @media (max-width: 768px) {
    .gallery-grid {
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      gap: 0.5rem;
    }
    
    .lightbox-nav {
      font-size: 2rem;
    }
  }
</style>
